clear allclose allclcload abalone.mat% labelCount = array2table(sum(labels == types), 'VariableNames', type_names)%% Data Manipulation% separate the dependent and independent variables% turn categorical into numerical array (M - 1, F - 2, I - 3)%sex = grp2idx(table2array(abalone(:, 1)));% construct full data matrixdata = table2array(abalone(:, 2 : 8));% obtain labels (age = rings + 1.5)age = table2array(abalone(:, 9)) + 1.5;%% Convolutional Neural Network Training% approximately 90% of images are used for training; the rest are used for% validationsz_training = floor(0.9 * size(data, 1));% generate random indices to use for trainingrandom_indices = randperm(size(data, 1));% generate training and validation data using random indices% since trainNetwork takes a 4-D numeric array (explained in further detail% below), the data is reshaped to denote the presence of 1 channel.training_data = data(random_indices(1 : sz_training), 1);validation_data = data(random_indices(sz_training + 1 : end), 1);% define categorical labels for later usetraining_age = age(random_indices(1 : sz_training));validation_age = age(random_indices(sz_training + 1 : end));network_layers = [    imageInputLayer([28 28 1])        convolution2dLayer(3,16,'Padding',1)    batchNormalizationLayer    reluLayer        maxPooling2dLayer(2,'Stride',2)        convolution2dLayer(3,16,'Padding',1)    batchNormalizationLayer    reluLayer        maxPooling2dLayer(2,'Stride',2)        convolution2dLayer(3,16,'Padding',1)    batchNormalizationLayer    reluLayer        fullyConnectedLayer(5)    softmaxLayer    classificationLayer];training_options = trainingOptions('sgdm',...    'MaxEpochs', 3, ... % change the number of epochs to 10 for increased accuracy    'ValidationData',{validation_data validation_age},... % ValidationData has been changed into a custom cell array    'ValidationFrequency', 30,...    'Verbose',true,...    'Plots','training-progress','ExecutionEnvironment','cpu');trained_network = trainNetwork(training_data, training_age, network_layers, training_options);predictedLabels = classify(trained_network,validation_data);valLabels = validation_age;accuracy = sum(predictedLabels == valLabels) / numel(valLabels);